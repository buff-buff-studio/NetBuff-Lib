{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p> <p> </p> </p>"},{"location":"#netbuff","title":"NetBuff","text":"<p>NetBuff is a Unity Game Engine based multiplayer engine created as lightweight alternative without the giant overhead of other libraries such as NGO (Netcode for GameObjects) and third-party solutions (like Mirror). This project as first created focusing on our own organization college projects but after a short time this system shown its value and so we put effort on polising and ironing the code to launch it as a an library itself, and here it is!</p>"},{"location":"#instalation-guide","title":"Instalation Guide","text":"<ol> <li>Go to Unity Package Manager Window -&gt; Package Manager</li> <li>Click the \"+\" button in the upper left corner of the window.</li> <li>Select the \"Add package from git URL...\" option.</li> <li>Paste the link below and click the \"Add\" button.</li> </ol> <pre><code>https://github.com/buff-buff-studio/NetBuff-Lib.git#package\n</code></pre>"},{"location":"#supported-transports","title":"Supported Transports","text":"<ul> <li>UDP</li> <li>Local (Supports multiple clients / Split Screen)</li> <li>You can create a custom transporter as well</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Editor/Debugging heavy support</li> <li>Hot-Reload (You can recompile the game without losing the game state)</li> <li>Server Password Protection</li> <li>Server Discovery System</li> <li>Reliable and Unrealiable packets</li> <li>Custom Packet Support</li> <li>Scene Loading / Unloading</li> </ul>"},{"location":"#credits","title":"Credits","text":"<ul> <li>Scripts by @arnilsenarthur</li> <li>Portability for Package by @SergioMacellani</li> <li>LiteNetLib by RevenantX</li> <li>Serialized Dictionary by ayellowpaper</li> </ul>"},{"location":"components/","title":"Components","text":"<p>The network component structure can be represented as the following image:</p> <p></p>"},{"location":"components/#network-manager","title":"Network Manager","text":"<p>The NetworkManager is the network's main component. It's reponsible to start server, manage connectionsserver, manage objects and sync all the data across the network. Only one NetworkManager shall exist per game. You may create your own implementation of a NetworkManager child class, overriding callbacks to fit your needs.</p> <p>In the network manager you set the current transportation interface, the prefab registry scriptable and the player prefab. You can also set the default server ticking rate, used by NetworkTransforms and NetworkAnimators.</p> <p>For the debugging purposes you can use the Dump Ids button to create a file listing all the registered NetworkIdentities at a given time.</p> <p></p>"},{"location":"components/#network-identity","title":"Network Identity","text":"<p>The NetworkIdentity is the component used by the network to keep object references across the network. Without the identifier the system can't assure that a object in a client view is the \"same\" object at the server environment. A NetworkIdentity does not contain any inspector fields, but shows the NetworkId for debugging purposes. The NetworkId is a 16-characters-long hex string (internally it's represented by two ints) that is used to keep the object reference across the network. </p> <p></p> <p>You can click at the N button to generate a new id for the object (don't do this if it's not necessary).</p>"},{"location":"components/#ownership","title":"Ownership","text":"<p>Every NetworkIdentity is owned by someone. The field NetworkIdentity.OwnerId is a int that stores the ownership of an object. By default this value is set to -1 (Server Owned). Any other value than -1 represents the id of a client. You can use the bool property NetworkIdentity.IsOwnedByClient to check if a NetworkIdentity is owned by any client. You can use the bool property NetworkIdentity.HasAuthority to check if the NetworkIdentity is owned the local client / local server (if it's host/server).</p> <p>The authority controls who can, by default, modify the NetworkValues related to the NetworkIdentity and who can control the data/state across the network.</p> <p>When you spawn a NetworkIdentity via network you can choose who is the owner of that object. Additionally you can NetworkIdentity.SetOwner (if you have ownership) to transfer a object to another owner:</p> <pre><code>if (!HasAuthority)\n    return;\n\n//Transfer the ownership back to the server\nif(Input.GetKeyDown(KeyCode.S))\n    SetOwner(-1);\n</code></pre>"},{"location":"components/#finding-objects","title":"Finding Objects","text":"<p>There are many methods to locate NetworkIdentity objects. You can use NetworkIdentity.GetNetworkObject to find a NetworkIdentity using it's NetworkId. You can use NetworkIdentity.GetNetworkObjectsOwnedBy to find all the object owned by a given client.</p>"},{"location":"components/#spawning-objects","title":"Spawning Objects","text":"<p>You can spawn new NetworkIdentity objects using the NetworkIdentity.Spawn method using a prefab. But, carefully, you need to register the prefab to the NetworkPrefabRegistry referenced by the NetworkManager:</p> <pre><code>Spawn(shotPrefab, cameraTransform.position + cameraTransform.forward * 1, cameraTransform.rotation, Vector3.one * 0.5f, true);\n</code></pre> <p>When you spawn a object you can choose it's ownership and if the object is active or not. By default the OwnerId will be -1 (Server) and the object will be active.</p>"},{"location":"components/#activating-deactivating-objects","title":"Activating / Deactivating Objects","text":"<p>You can also toggle the active state of an object. But, instead of using GameObject.active you must use NetworkIdentity.SetActive method. Only the owner of the object can toggle it's activeness, and it will be synced across the network:</p> <pre><code>SetActive(false)\n</code></pre>"},{"location":"components/#despawning-objects","title":"Despawning Objects","text":"<p>If you need to destroy a NetworkIdentity object you may not use GameObject.Destroy. Instead you need to use NetworkIdentity.Despawn to destroy the object across the network:</p> <pre><code>Despawn(false)\n</code></pre>"},{"location":"components/#network-behaviour","title":"Network Behaviour","text":"<p>The NetworkBehaviour class is the base class for all network components that are attached to NetworkIdentity objects. It requires the NetworkIdentity component and CAN'T be added / removed from a object at runtime. Almost all the logic of your project that requires network will be writen implementing this class.</p>"},{"location":"components/#network-transform","title":"Network Transform","text":"<p>The NetworkTransform is one of the standard basic NetworkBehaviours. It's used to sync a object transform state. You can customize the rate and which fields will be sync across the network (saving data transfer rate):</p> <p></p> <p>You shall not change the NetworkTransform.SyncMode runtime. The thresholds determines when a transform should be re-synced or not. If the tick rate is set to -1, the NetworkManager tick rate will be used.</p>"},{"location":"components/#network-rigidbody-transform","title":"Network Rigidbody Transform","text":"<p>The NetworkRigidbodyTransform works similiar to its base class NetworkTransform, but it also syncs the velocity and angular velocity fields. This component requires the Rigidbody component.</p> <p></p> <p>You shall not change the NetworkTransform.SyncMode runtime. The thresholds determines when a transform should be re-synced or not. If the tick rate is set to -1, the NetworkManager tick rate will be used.</p>"},{"location":"components/#network-animator","title":"Network Animator","text":"<p>The NetworkAnimator, as the name implies, is used to sync the state of an Animator. This component will sync parameters, layer weights and animation/transition timings:</p> <p></p> <p>You shall use the NetworkAnimator.SetTrigger instead of the Animator.SetTrigger cause triggers don't save any state, so the system cannot detect changes in them. All other parameter types will sync automatically.</p>"},{"location":"components/#network-values","title":"Network Values","text":"<p>The first (and the most simple) way to customize your NetworkBehaviours is using NetworkValues. The list bellow shows all the supported value types. You can add support to your custom type as well, using serialization and deserialization.</p> <ul> <li>Bool</li> <li>Byte</li> <li>Int</li> <li>Float</li> <li>Double</li> <li>Long</li> <li>Short</li> <li>String</li> <li>Vector2</li> <li>Vector3</li> <li>Vector4</li> <li>Quaternion</li> <li>Color</li> <li>NetworkId</li> </ul> <pre><code>public class CustomBehaviour : NetworkBehaviour\n{\n    //Only the NetworkIdentity owner can modify this value\n    public ColorNetworkValue color = new ColorNetworkValue(Color.white);\n    //Only the server can modifiy this value\n    public IntNetworkValue team = new IntNetworkValue(2, NetworkValue.ModifierType.Server);\n\n    private void OnEnable()\n    {\n        //Register values\n        WithValues(color, team);\n    }\n\n    private void Update()\n    {\n        if(!HasAuthority)\n            return;\n\n        if(Input.GetKeyDown(KeyCode.Space))\n            team.Value ++;   \n    }\n}\n</code></pre> <p>Network values will be shown yellow in the inspector. For testing purposes, any NetworkValue can be modified in the Inspector, even if you don't have permission do change it.</p> <p></p>"},{"location":"components/#listening-for-changes","title":"Listening For Changes","text":"<p>The NetworkValue&lt;&gt; base class has an OnValueChanged callback that is called when the value is updated (locally or externally). It's very useful while creating reactive systems (like a player that changes the color if his team changes). You can see another usage bellow:</p> <pre><code>public class PlayerController : NetworkBehaviour\n{\n    public StringNetworkValue nickname = new StringNetworkValue(\"\");\n    public TMP_Text headPlate;\n\n    public void OnEnable()\n    {\n        WithValues(nickname);\n\n        nickname.OnValueChanged += (oldValue, newValue) =&gt;\n        {\n            headPlate.text = newValue;\n        };\n    } \n\n}\n</code></pre>"},{"location":"custom_behaviours/","title":"Creating Custom Behaviours","text":"<p>In the following sections you can find help on how to implement you own NetworkBehaviours, overriding its network callbacks. The basic structure of a NetworkBehaviour is shown bellow:</p> <pre><code>public class CustomNetworkBehaviour : NetworkBehaviour\n{\n    //My Fields\n    public float walkSpeed = 3f;\n\n    //My Network Values\n    public IntNetworkValue team = new IntNetworkValue(0);\n\n    //Unity callbacks\n    public void OnEnable(){}\n\n    //Network callbacks\n    public override void OnSpawned(bool isRetroactive){}\n}\n</code></pre> <p>There's no special rules, it works exactly like a normal MonoBehaviour, while providing network communication/syncing and the power to change the behaviour of a NetworkIdentity object</p>"},{"location":"custom_behaviours/#custom-serialization","title":"Custom Serialization","text":"<p>If your class has a complex (or even variable data structure) that is too complex to be synced via NetworkValues you can use the custom serialization system. All you need to do is using the interface INetworkBehaviourSerializer:</p> <pre><code>public class CustomNetworkBehaviour : NetworkBehaviour, INetworkBehaviourSerializer\n{\n    public float[] valueTooComplex = new float[0];\n\n    public void OnSerialize(BinaryWriter writer, bool forceSendAll)\n    {\n        writer.Write(valueTooComplex.Length);\n        for (var i = 0; i &lt; valueTooComplex.Length; i++)\n        {\n            writer.Write(valueTooComplex[i]);\n        }   \n    }\n\n    public void OnDeserialize(BinaryReader reader)\n    {\n        var length = reader.ReadInt32();\n        valueTooComplex = new float[length];\n        for (var i = 0; i &lt; length; i++)\n        {\n            valueTooComplex[i] = reader.ReadSingle();\n        }\n    }\n}\n</code></pre> <p>Doing this, all the data will be synced through the network (even for late-joiners). If your data is too complex you can implement a system to only update the needed data, but when forceSendAll is true you need to write all the data to the writer. This value will be true when a late joiner is requesting all NetworkIdentities data. You can use NetworkIdentity.MarkSerializerDirty to call the OnSerialize method, so the OnSerialize (with forceSendAll = false) will be called again and the data will be synced, so the other network peers will use OnDeserialize to read the data.</p>"},{"location":"custom_behaviours/#custom-packets","title":"Custom Packets","text":"<p>The third method to create custom data transfer / syncing is using packets. Internally, all the three methods end up using Packets to send data through the network, but you can create your custom own packets. The packet system was chosen was the main transfer method of NetBuff as packets are super fast, easy-to-use and lightweight while comparated to other solutions.</p> <p>To create a custom packet you need to create a new class that implements the IPacket or the IOwnedPacket interface:</p> <pre><code>public class PlayerPunchActionPacket : IPacket\n{\n    public NetworkId Id { get; set; }\n\n    public void Serialize(BinaryWriter writer)\n    {\n        Id.Serialize(writer);\n    }\n\n    public void Deserialize(BinaryReader reader)\n    {\n        Id = NetworkId.Read(reader);\n    }\n}\n\npublic class PacketBodyRotation : IOwnedPacket\n{\n    public NetworkId Id { get; set; }\n    public float BodyRotation { get; set; }\n\n    public void Serialize(BinaryWriter writer)\n    {\n        Id.Serialize(writer);\n        writer.Write(BodyRotation);\n    }\n\n    public void Deserialize(BinaryReader reader)\n    {\n        Id = NetworkId.Read(reader);\n        BodyRotation = reader.ReadSingle();\n    }\n}\n</code></pre> <p>A IOwnedPacket is a IPacket that is directly attached to a NetworkIdentity, so they will be sent internally by a NetworkBehaviour and the server will find the same NetworkBehaviour at the other network peers and call the receiving callback.</p> <p>A normal IPacket is not directly attached to anything, so they will just sent through the network and all the handling must be done manually.</p>"},{"location":"custom_behaviours/#sending-packets","title":"Sending Packets","text":"<p>To send a packet you can use the SendPacket method that will automatically use the correct method to send the packet:</p> <pre><code>var packet = new PacketBodyRotation\n{\n    Id = Id,\n    BodyRotation = body.localEulerAngles.y\n};\nSendPacket(packet);\n</code></pre> <p>Internally the SendPacket method uses the NetworkBehaviour.ClientSendPacket and NetworkBehaviour.ServerBroadcastPacket methods, so you can use them as well:</p> <pre><code>if (IsOwnedByClient)\n    ClientSendPacket(packet, reliable); //Client sends a message to the server\nelse\n    ServerBroadcastPacket(packet, reliable); //Server broadcast a message to all the clients\n</code></pre> <p>If you are on the server side you can use NetworkBehaviour.ServerBroadcastPacketExceptFor to broadcast a message to all the clients except one. This behaviour can be useful sometimes.</p>"},{"location":"custom_behaviours/#packet-reliability","title":"Packet Reliability","text":"<p>When you use any of the packet sending methods you can set the argument of reliabity. When set to true the delivery method is reliable, supports larger packets with the cost of being a little slower. When the value is set to false there no realibity, packets are limited to small sizes but the delivery is blazing fast!</p> <p>NetworkValue syncing and any other important/instant action are made using reliable delivery, as they need to be guaranteed to delivered. NetworkTransform in the other side don't use the reliability delivery, as their state is almost constantly updated, so losing some packets will probably not cause an issue.</p> <p>The packet loss count can be seen using the NetworkManagerGUI. If the network connection quality is good you may not lose a single packet, but if you have network issues you may experience some packet loss. Choose wisely when the reliability is needed or not. Most of the time the reliable=true is the way to go.</p> Unreliable Reliable Speed Fast+ Fast Max Size Small Large Order May be unordered The order will be kept Loss May be lost If lost they will be sent again usage Example NetworkTransform, high-freq update packets Actions, NetworkValues, etc..."},{"location":"custom_behaviours/#receiving-owned-packets","title":"Receiving Owned Packets","text":"<p>To receive IOwnedPackets we can use the NetworkBehaviour.OnServerReceivePacket and NetworkBehaviour.OnClientReceivePacket callbacks:</p> <pre><code>public class PlayerController : NetworkBehaviour\n{\n    //Server received the packet, check the ownership (optional) than broadcasts it to everyone else than the origin client\n    public override void OnServerReceivePacket(IOwnedPacket packet, int clientId)\n    {\n        switch (packet)\n        {\n            case PacketBodyRotation data:\n                if(clientId == OwnerId)\n                    ServerBroadcastPacketExceptFor(data, clientId);\n                break;\n        }\n    }\n\n\n    //Client received the packet, then applied it to the transform itslf\n    public override void OnClientReceivePacket(IOwnedPacket packet)\n    {\n        switch (packet)\n        {\n            case PacketBodyRotation bodyRot:\n                transform.eulerAngles = new Vector3(0, bodyRot.BodyRotation, 0);\n                break;\n        }\n    }\n}\n</code></pre> <p>Only the object with the IOwnedPacket id will receive the callbacks, so you don't need to worry checking the id manually!</p>"},{"location":"custom_behaviours/#receiving-not-owned-any-packets","title":"Receiving Not Owned / Any Packets","text":"<p>If a packet is not owned you can register a custom listener for it anywhere in the project. In the example bellow the Lever class is listening for PlayerPunchActionPacket, which is a packet that is sent by the PlayerController class:</p> <pre><code>public class Lever : NetworkBehaviour\n{\n    public BoolNetworkValue isOn = new(false);\n    public float radius = 2f;\n\n    private void OnEnable()\n    {\n        WithValues(isOn);\n        GetPacketListener&lt;PlayerPunchActionPacket&gt;().OnServerReceive += OnPlayerPunch;\n        //GetPacketListener&lt;PlayerPunchActionPacket&gt;().OnClientReceive ...;\n    }\n\n    private void OnDisable()\n    {\n        GetPacketListener&lt;PlayerPunchActionPacket&gt;().OnServerReceive -= OnPlayerPunch;\n    }\n\n    private void OnPlayerPunch(PlayerPunchActionPacket obj, int client)\n    {\n        var o = GetNetworkObject(obj.Id);\n        var dist = Vector3.Distance(o.transform.position, transform.position);\n\n        if (dist &gt; radius)\n            return;\n\n        isOn.Value = !isOn.Value;\n    }\n}\n\npublic class PlayerController : NetworkBehaviour\n{\n    private void Update()\n    {\n        if (!HasAuthority)\n            return;\n\n        if (Input.GetKeyDown(KeyCode.Q))\n        {\n            SendPacket(new PlayerPunchActionPacket { Id = Id }, true);\n        }\n    }\n}\n</code></pre> <p>You can use the NetworkBehaviour.GetPacketListener to listen to IOwnedPackets as well.</p>"},{"location":"custom_behaviours/#network-callbacks","title":"Network Callbacks","text":"<p>In the table bellow you can find a list of all the NetworkBehaviour class callbacks:</p> Name Parameters Description OnServerReceivePacket IOwnedPacket packet int clientId Called when the server side object receives an IOwnedPacket (Called on host as well) OnClientReceivePacket IOwnedPacket packet Called when the client side object receives and IOwnedPacket (Called on host as well) OnSpawned bool isRetroactive Called in the first frame that a NetworkIdentity object exists into the network. isRetroactive will be true for late-joiners syncing purposes OnSceneChanged int fromScene int toScene Called when the object is moved from one scene to another OnClientConnected int clientId Called when a client connect to the server (Called only on server) OnClientDisconnected int clientId Called when a client disconnect from the server (Called only on server) OnDespawned Called when a NetworkIdentiy object is despawned OnActiveChanged bool active Called when the activeness of a NetworkIdentity object changes OnOwnershipChanged int oldOwner int newOwner Called when the ownership of a NetworkIdentity object changes <p>You can use any Unity callback normally as a NetworkBehaviour is also a MonoBehaviour.</p>"},{"location":"custom_network_manager/","title":"Custom Network Manager","text":"<p>Sometimes the default network manager implementation may not fullfil all your needs. We recommend you to create your own implementation of the NetworkManager to fit your project needs. In the following example theres a custom NetworkManager implementation where we override the NetworkManager.OnSpawnPlayer method to fit our probject (Solis) needs:</p> <pre><code>public class SolisNetworkManager : NetworkManager\n{\n    public GameObject robotPrefab;\n    public Transform robotSpawnPoint;\n    public Transform humanSpawnPoint;\n\n    private void Awake()\n    {\n        if (Instance == this || Instance == null) DontDestroyOnLoad(this.gameObject);\n        else Destroy(this.gameObject);\n    }\n\n    protected override void OnSpawnPlayer(int clientId)\n    {  \n        var prefab = clientId == 0 ? playerPrefab : robotPrefab;\n        var t = clientId == 0 ? humanSpawnPoint : robotSpawnPoint;\n        Assert.IsTrue(prefabRegistry.IsPrefabValid(prefab), \"Player prefab is not valid\");\n        SpawnNetworkObjectForClients(prefabRegistry.GetPrefabId(prefab), t.position, t.rotation, t.localScale, clientId);\n    }\n}\n</code></pre>"},{"location":"custom_network_manager/#callbacks","title":"Callbacks","text":"<p>In the list bellow you can find all the methods that you can customize to fit your project:</p> Name Parameters Description OnServerStart Called when the server stats (Server Only) OnServerStop Called when the server stops (Server Only) OnNetworkObjectSpawned NetworkIdentity identity bool retroactive Called when a NetworkIdentity object spawns OnNetworkObjectDespawned NetworkIdentity identity Called right before a NetworkIdentity object despawn OnClientConnected int clientId Called when a client joins the server (Server Only) OnClientDisconnected int clientId string reason Called when a client leaves the server (Server Only) OnSpawnPlayer int clientId Called by the server when a client joins to spawn the player object (Server Only) OnConnect Called when the client joins the server (Client Only) OnDisconnect string reason Called when the client leaves the server (Client Only) OnServerReceivePacket int clientId IPacket packet Called when the server receives a packet (Server Only) OnClientReceivePacket IPacket packet Called when the client receives a packet (Client Only) OnClearEnvironment Called after the server stop / client disconnection to clear the main scene to it's initial state"},{"location":"getting_started/","title":"Getting Started","text":"<p>In the following sections you can find help on how to setup a NetLib project. We recommend using unity 2023.2 or a newer version.</p>"},{"location":"getting_started/#package-installation","title":"Package Installation","text":"<ol> <li>Go to Unity Package Manager Window -&gt; Package Manager</li> <li>Click the \"+\" button in the upper left corner of the window.</li> <li>Select the \"Add package from git URL...\" option.</li> <li>Paste the link below and click the \"Add\" button.</li> <li>Done! Now the package is already installed. You can download samples as well if you want</li> </ol> <pre><code>https://github.com/buff-buff-studio/NetBuff-Lib.git#package\n</code></pre>"},{"location":"getting_started/#networking-setup","title":"Networking Setup","text":"<p>Create a empty scene to begin. We recommend using the Basic (Built-In) template:</p> <p></p> <p>Now, create a new GameObject and add the following components:</p> <ul> <li>Network Manager</li> <li>Network Manager GUI</li> <li>UDP Network Transport</li> </ul> <p></p>"},{"location":"getting_started/#network-manager","title":"Network Manager","text":"<p>The NetworkManager is the main network component. It manages conections, objects, packets and everything else network-related, being an unique component in the network structure.</p>"},{"location":"getting_started/#network-manager-gui","title":"Network Manager GUI","text":"<p>The NetworkManagerGUI is a temporary component used for testing purposes. It creates a menu where you can manage the network connection, find all the servers on the network and to see network stats</p>"},{"location":"getting_started/#udp-network-transport","title":"UDP Network Transport","text":"<p>The UDPNetworkTransport is the basic transport, used to establish server-client connections over internet</p>"},{"location":"getting_started/#set-network-transport","title":"Set Network Transport","text":"<p>Now we need to set the network transport at the network manager. Just drag and drop the transport into the manager transport field:</p> <p></p>"},{"location":"getting_started/#creating-the-player-prefab","title":"Creating the player prefab","text":"<p>If you start the game and try to host a server you will see an error in console. By default we need to provide a player prefab to the NetworkManager to spawn the player object. Following the steps bellow we can create a simple player prefab:</p> <ol> <li>Create a new capsule</li> <li>Add a NetworkTransform component</li> <li>Drop it as a prefab at the Project View</li> <li>Delete it from the scene</li> </ol>"},{"location":"getting_started/#creating-the-prefab-registry","title":"Creating the prefab registry","text":"<p>Now you are one step away from the success! Even if you set the player prefab, all the network ends must know what the prefab the server is trying to spawn, so we need to setup our NetworkPrefabRegistry first.</p> <ol> <li>Create a new NetworkPrefabRegistry in the left click menu of the Project Folder</li> <li>Add the prefab to the registry list (Create at the + button to add a new slot to the registry)</li> <li>Click on N button to generate a new id</li> <li>Set it in the registry field of the NetworkManager</li> <li>Set the player prefab in the player prefab field of the NetworkManager</li> </ol> <p></p>"},{"location":"getting_started/#done","title":"Done!","text":"<p>Now we are done! You can hit the play button and then click in Start Host to start the host (Client + Server)</p> <p></p>"},{"location":"getting_started/#simple-movement-test","title":"Simple Movement Test","text":"<p>Creating a simple script we can test our server. You can use the code bellow or create your own logic!</p> <pre><code>using NetBuff.Components;\nusing UnityEngine;\n\nnamespace Samples.Docs\n{\n    public class BasicMovement : NetworkBehaviour\n    {\n        private void Update()\n        {\n            if (!HasAuthority)\n                return;\n\n            var move = new Vector3(Input.GetAxis(\"Horizontal\"), 0, Input.GetAxis(\"Vertical\"));\n            transform.position += move * Time.deltaTime * 3;\n        }\n    }\n}\n</code></pre> <p>Add it to player and run the game again! You can even build and join the server as client because your multiplayer game is already working!</p> <p></p>"},{"location":"network_testing/","title":"Testing the Network","text":"<p>We commeding using the package Multiplayer Player Mode to test your game in the editor with no need to generate a build every single time. If you want you can also just generate a build and run it as well. With the hot-reload system you can edit your code in real time and your server state will be kept with no problems, so you can tweak values or test / debug systems without the needing of rebuilding your project every single time.</p> <p>The default NetBuff transport method is UDP. Using the UDPNetworkTransport you can test your game connecting multiples clients (editors and builds) with just one click!</p> <p>We recommend using the Clumsy to simulate lag and packet loss between your network connections to see where your projects need more optimization / clean up. Clumsy is a free tool that can simulate lag, packet drops, out of order delivery and much more:</p> <p></p> <p>Using the out of order / packet drop feature you can check if some your packets that is been sent in a unreliable way should be changed to the reliable method and to check if there's any issue in the network state syncing.</p>"},{"location":"object_spawning/","title":"Spawning Objects","text":"<p>There are two types of NetworkIdentity objects: pre-existing and realtime-spawned. Using the field NetworkIdentity.PrefabId you can check if a object is pre-existing or not. If the PrefabId is empty the object was not spawned in real time. Otherwise the PrefabId will store the NetworkId of the prefab used to create that object. It's very important for the server to know how to recreate the server state when a late-joiner joins the server.</p> <p>You can spawn NetworkObjects using the NetworkIdentity.SpawnObject static method:</p> <p><pre><code>if(Input.GetMouseButtonDown(0))\n{\n    Spawn(shotPrefab, cameraTransform.position + cameraTransform.forward * 1, cameraTransform.rotation, Vector3.one * 0.5f, true);\n}\n</code></pre> And done! With one line of code your game object is spawned all across the network. Just remember to check if your prefab is registered into the NetworkPacketRegistry. You can also use the NetBuff/Check Prefab Registries if there's any problem with your registries:</p> <p></p>"},{"location":"object_spawning/#spawning-parameters","title":"Spawning Parameters","text":"<p>In the list bellow you can find all the parameters you can set in a NetworkIdentity object spawning:</p> Parameter Type Description Owner int Represents the ownership id of the object. Default is -1 (Server) Position Vector3 Object world position Rotation Quaternion Object world rotation Scale Vector3 Object scale Active bool Object activeness state Scene int Represents the target scene id. Default is -1 (Last Loaded Scene) <p>The scene id is the only complex one. By default it's set to -1, so the NetworkIdentity object will spawn in the current last loaded scene. If the value is set to any other value it will be set to the correspondent loaded scene. The scene id 0 will always point to the main scene, where the NetworkManager is located.</p>"},{"location":"reconnection_and_hot_reload/","title":"Reconnection And Hot Reload","text":"<p>NetBuff supports mid/late-game connections with no problems: Every single NetworkIdentity from every single scene will be synced, within it's values and it's additional serialized data. Even on editor, you can edit the code, recompile the project and the server will keep it's state with no problems (the clients will need to reconnec, but even their players objects will be kept in the same state with no data loss).</p> <p>To keep the system working you have to assure that the object state values are synced over the networking, using the NetworkValues or using INetworkBehaviourSerializer callbacks. If you need aditional syncing you can request a custom packet in the NetworkBehaviour.OnSpawned callback as well, using the parameter isRetroactive to check if it's a late joining syncing or not.</p> <p>We heavily recommend, that after every single big system modification / addition the developers make the following checks:</p> <ol> <li>The Hot-Reloading feature still works with your system</li> <li>Mid/Late-Joiners have no issues syncing your game state</li> </ol> <p>This two checks assures that you won't have any state-sycning problems over the network, and every single client/player will be able to sync the game state with no issues at all. The hot-reloading is not mandatory but it can speeds the network testing, as you can modify code and NetworkValues via inspector without losing the server current state.</p>"},{"location":"scene_management/","title":"Managing Scenes","text":"<p>NetBuff supports loading/unloading scenes in runtime, allowing the system to provide level loading/unloading flow control and other scene-based control flow. Every single NetworkIdentity object has the field NetworkIdentity.SceneId that represents in which network loaded scene the object is:</p> <pre><code>public int SceneId;\n</code></pre>"},{"location":"scene_management/#scene-id-rules","title":"Scene Id Rules","text":"<p>The scene where your NetworkManager is located is considered the main scene, as the networking process will always start from there. The main scene will always have the id of 0.</p> <p>Everyother scene will have the id linked to its position if the NetworkManager.LoadedScenes list</p> <ol> <li>You start the network</li> <li>You load the scene \"Test1.unity\". It'll have the id 1</li> <li>You load the scene \"Test2.unity\". It'll have the id 2</li> <li>You unload the scene \"Test1.unity\"</li> <li>Now the scene Test2 becomes the scene 1, cause it's linked to loaded scenes list</li> </ol> <p>You can always use the scene id -1 to spawn or move objects around. This id represents the NetworkManager.LastLoadedScene (the scene in the last position of the loaded scenes list). If no additional scene is loaded it will point to the main scene.</p>"},{"location":"scene_management/#loading-and-unloading-scenes","title":"Loading and Unloading Scenes","text":"<p>Only the server can load and unload scenes, but anyone can check if a scene is loaded and which scenes are loaded right now. The NetworkIdentity.SceneId will be synced between every network end and every other scene-related method/property will work in any end as well.</p> <p>You can load / unload scenes using the NetworkManager.LoadScene and NetworkManager.UnloadScene methods:</p> <pre><code>public class SceneLoadingController : NetworkBehaviour\n{\n    public string scene1 = \"Scene1\";\n\n    public void Update()\n    {\n        if (IsServer)\n        {\n            if (Input.GetKeyDown(KeyCode.Alpha1))\n            {\n                //Checks if the scene is already loaded\n                if (NetworkManager.Instance.IsSceneLoaded(scene1))\n                    //Unloads the scene\n                    NetworkManager.Instance.UnloadScene(scene1);\n                else\n                    //Loads the scene\n                    NetworkManager.Instance.LoadScene(scene1);\n            }\n        }\n    }\n}\n</code></pre> <p>When you unload a scene all the NetworkIdentity objects in it will be despawned with no issues. If a late-joiner enters the game, every single object in every single scene will be synced with no problems as well. </p>"},{"location":"scene_management/#moving-objects-between-scenes","title":"Moving Objects Between Scenes","text":"<p>If you have the ownership over a NetworkIdentity object, you can move it between scenes easily, using the NetworkIdentity.MoveToScene method:</p> <pre><code>public void Update()\n{\n    if(!HasAuthority)\n        return;\n\n    if (Input.GetKeyDown(KeyCode.M))\n    {\n        var id = SceneId + 1;\n        if (id &gt;= LoadedSceneCount)\n            id = 0;\n        //Moves the object to the next loaded scene\n        MoveToScene(id);\n    }\n}\n</code></pre>"},{"location":"scene_management/#main-scene","title":"Main Scene","text":"<p>The main scene is the scene where your NetworkManager is. It can't be unloaded and is the scene where player prefabs spawns by default. We heavily recommend that you leave the players and anything scene-persistent on the main scene, like singletons, controllers, etc...</p>"}]}